#include <iostream>

#include <cctype>

#include <stack>



using namespace std;



class treenode{

    public:

    char value;

    treenode* left;

    treenode* right;



    treenode(char val){

        value = val;

        left = right = nullptr;

    }

};



bool isOperand(char c){

    return isalnum(c);

}



treenode* constructTree(string& postfix){

    stack <treenode*> s;

    for(int i=0;i<postfix.length();i++){

        treenode* node = new treenode(postfix[i]);

        if(isOperand(postfix[i])){

            s.push(node);

        }

        else{

            node->right = s.top();

            s.pop();

            node->left = s.top();

            s.pop();

            s.push(node);

        }

    }

    return s.top();

}



void recPre(treenode* node){

    if(node){

        cout<< node->value;

        recPre(node->left);

        recPre(node->right);

    }

}



void recPost(treenode* node){

    if(node){

         recPost(node->left);

        recPost(node->right);

        cout<< node->value;

    }

}



void NonRecPre(treenode* root){

    stack <treenode*> s;

    s.push(root);



    while(!s.empty()){

        treenode* current = s.top();

        s.pop();

        cout<<current->value;



        if(current->right){

            s.push(current->right);

        }



        if(current->left){

            s.push(current->left);

        }

    }

}



void NonRecPost(treenode* root){

    stack <treenode*> s;

    s.push(root);

    treenode* visited = nullptr;



    while(!s.empty()){

        treenode* current = s.top();



        if(!current){

            s.pop();

            visited=nullptr;

        }



        else if(current->left && visited!= current->right && visited!=current->left){

            s.push(current->left);

        }



        else if(current->right && visited!=current->right){

            s.push(current->right);

        }

        else{

            cout<<current->value;

            visited=current;

            s.pop();

        }

    }

}



int main(){

    string postfix;

    cin>>postfix;



    treenode* tree = constructTree(postfix);



    recPre(tree);

    cout<<endl;

    recPost(tree);

    cout<<endl;

    NonRecPre(tree);

    cout<<endl;

    NonRecPost(tree);

    cout<<endl;





}
