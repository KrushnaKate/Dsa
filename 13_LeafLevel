#include <iostream>

#include <queue>

using namespace std;



class Node {

public:

    int key;

    Node* left;

    Node* right;



    Node(int value) {

        key = value;

        left = right = nullptr;

    }

};



class BinarySearchTree {

private:

    Node* root;



    Node* insert(Node* root, int key) {

        if (root == nullptr) {

            return new Node(key);

        }



        if (key < root->key) {

            root->left = insert(root->left, key);

        } else if (key > root->key) {

            root->right = insert(root->right, key);

        }

        // Handle duplicate entries (you can modify this part as needed)



        return root;

    }



    Node* minValueNode(Node* node) {

        Node* current = node;

        while (current && current->left != nullptr) {

            current = current->left;

        }

        return current;

    }



    Node* deleteNode(Node* root, int key) {

        if (root == nullptr) {

            return root;

        }



        if (key < root->key) {

            root->left = deleteNode(root->left, key);

        } else if (key > root->key) {

            root->right = deleteNode(root->right, key);

        } else {

            if (root->left == nullptr) {

                Node* temp = root->right;

                delete root;

                return temp;

            } else if (root->right == nullptr) {

                Node* temp = root->left;

                delete root;

                return temp;

            }



            Node* temp = minValueNode(root->right);



            root->key = temp->key;



            root->right = deleteNode(root->right, temp->key);

        }



        return root;

    }



    bool search(Node* root, int key) {

        if (root == nullptr) {

            return false;

        }



        if (root->key == key) {

            return true;

        } else if (key < root->key) {

            return search(root->left, key);

        } else {

            return search(root->right, key);

        }

    }



    void inorderTraversal(Node* root) {

        if (root != nullptr) {

            inorderTraversal(root->left);

            cout << root->key << " ";

            inorderTraversal(root->right);

        }

    }



    void displayLeafNodes(Node* root) {

        if (root != nullptr) {

            if (root->left == nullptr && root->right == nullptr) {

                cout << root->key << " ";

            } else {

                displayLeafNodes(root->left);

                displayLeafNodes(root->right);

            }

        }

    }



    void displayLevelWise(Node* root) {

        if (root == nullptr) {

            return;

        }



        queue<Node*> q;

        q.push(root);



        while (!q.empty()) {

            int size = q.size();

            for (int i = 0; i < size; ++i) {

                Node* current = q.front();

                q.pop();

                cout << current->key << " ";



                if (current->left != nullptr) {

                    q.push(current->left);

                }



                if (current->right != nullptr) {

                    q.push(current->right);

                }

            }

            cout << endl;

        }

    }



public:

    BinarySearchTree() {

        root = nullptr;

    }



    void insert(int key) {

        root = insert(root, key);

    }



    void deleteKey(int key) {

        root = deleteNode(root, key);

    }



    bool searchKey(int key) {

        return search(root, key);

    }



    void displayTree() {

        inorderTraversal(root);

        cout << endl;

    }



    void displayLeafNodes() {

        displayLeafNodes(root);

        cout << endl;

    }



    void displayLevelWise() {

        displayLevelWise(root);

    }

};



int main() {

    BinarySearchTree bst;



    bst.insert(50);

    bst.insert(30);

    bst.insert(70);

    bst.insert(20);

    bst.insert(40);

    bst.insert(60);

    bst.insert(80);



    cout << "Original Tree (Inorder Traversal): ";

    bst.displayTree();



    int keyToDelete = 30;

    cout << "Deleting Node with key " << keyToDelete << endl;

    bst.deleteKey(keyToDelete);



    cout << "Tree after deletion (Inorder Traversal): ";

    bst.displayTree();



    int keyToSearch = 40;

    cout << "Search for key " << keyToSearch << ": " << (bst.searchKey(keyToSearch) ? "Found" : "Not Found") << endl;



    cout << "Leaf Nodes: ";

    bst.displayLeafNodes();



    cout << "Tree Level Wise:" << endl;

    bst.displayLevelWise();



    return 0;

}
