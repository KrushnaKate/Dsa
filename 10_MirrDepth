#include <iostream>

using namespace std;



class TreeNode {

public:

    int data;

    TreeNode* left;

    TreeNode* right;



    TreeNode(int value) : data(value), left(nullptr), right(nullptr) {}

};



class BinarySearchTree {

private:

    TreeNode* root;



public:

    BinarySearchTree() : root(nullptr) {}



    void insert(int data) {

        root = insert(root, data);

    }



    void remove(int data) {

        root = remove(root, data);

    }



    bool search(int data) {

        return search(root, data);

    }



    void display() {

        inorderTraversal(root);

        cout << endl;

    }



    void depth() {

        int depth = calculateDepth(root);

        cout << "Depth of the tree: " << depth << endl;

    }



    void mirror() {

        root = mirror(root);

    }



private:

    TreeNode* insert(TreeNode* node, int data) {

        if (node == nullptr) {

            return new TreeNode(data);

        }



        if (data < node->data) {

            node->left = insert(node->left, data);

        } else if (data > node->data) {

            node->right = insert(node->right, data);

        } else {

            // Handle duplicate entries (optional)

        }



        return node;

    }



    TreeNode* remove(TreeNode* node, int data) {

        if (node == nullptr) {

            return nullptr;

        }



        if (data < node->data) {

            node->left = remove(node->left, data);

        } else if (data > node->data) {

            node->right = remove(node->right, data);

        } else {

            if (node->left == nullptr) {

                TreeNode* temp = node->right;

                delete node;

                return temp;

            } else if (node->right == nullptr) {

                TreeNode* temp = node->left;

                delete node;

                return temp;

            }



            TreeNode* temp = findMin(node->right);

            node->data = temp->data;



            node->right = remove(node->right, temp->data);

        }



        return node;

    }



    bool search(TreeNode* node, int data) {

        if (node == nullptr) {

            return false;

        }



        if (data == node->data) {

            return true;

        } else if (data < node->data) {

            return search(node->left, data);

        } else {

            return search(node->right, data);

        }

    }



    void inorderTraversal(TreeNode* node) {

        if (node != nullptr) {

            inorderTraversal(node->left);

            cout << node->data << " ";

            inorderTraversal(node->right);

        }

    }



    int calculateDepth(TreeNode* node) {

        if (node == nullptr) {

            return 0;

        }



        int leftDepth = calculateDepth(node->left);

        int rightDepth = calculateDepth(node->right);



        return max(leftDepth, rightDepth) + 1;

    }



    TreeNode* mirror(TreeNode* node) {

        if (node == nullptr) {

            return nullptr;

        }



        swap(node->left, node->right);

        mirror(node->left);

        mirror(node->right);



        return node;

    }



    TreeNode* findMin(TreeNode* node) {

        while (node->left != nullptr) {

            node = node->left;

        }

        return node;

    }

};



int main() {

    BinarySearchTree bst;



    // Insert

    bst.insert(50);

    bst.insert(30);

    bst.insert(70);

    bst.insert(20);

    bst.insert(40);

    bst.insert(60);

    bst.insert(80);

    bst.insert(50);  // Duplicate entry

    bst.insert(50);  // Duplicate entry



    // Display

    cout << "Inorder Traversal (Display Tree): ";

    bst.display();



    // Depth

    bst.depth();



    // Mirror

    cout << "Mirror Tree (Inorder Traversal): ";

    bst.mirror();

    bst.display();



    // Search

    int searchKey = 60;

    cout << "Search for " << searchKey << ": " << (bst.search(searchKey) ? "Found" : "Not Found") << endl;



    // Remove

    int removeKey = 50;

    cout << "Removing " << removeKey << endl;

    bst.remove(removeKey);

    cout << "Inorder Traversal after removal: ";

    bst.display();



    return 0;

}
