#include <iostream>

#include <algorithm>



using namespace std;



class node{

    public:

    char data;

    node* next;



    node(char val){

        data = val;

        next = nullptr;

    }

};



class stack{

    public:

    node* top;



        stack(){

            top = nullptr;

        }



        bool isEmpty(){

            return top == nullptr;

        }



        void push(char val){

            node* newnode = new node(val);

            newnode->next = top;

            top = newnode;

        }



        char pop(){

            if(isEmpty()){

                cout<<"empty";

            }

            node* temp = top;

            char popped = temp->data;

            top = top->next;

            delete temp;

            return popped;

        }



        char peek(){

            if(isEmpty()){

                cout<<"empty";

            }



            return top->data;

        }



        ~stack(){

            while(!isEmpty()){

                pop();

            }

        }

};



bool isOperater(char c){

    return (c == '+' || c == '-' || c == '*' || c == '/' || c == '^');

}



int precedance(char c){

    if(c == '^'){

        return 3;

    }



    else if(c == '*' || c == '/'){

        return 2;

    }



    else if(c == '+' || c == '-'){

        return 1;

    }



    else{

        return -1;

    }

}



string inToPost(stack& s, const string& infix){

    string postfix;



    for(int i=0;i<infix.length();i++){

        if(isalnum(infix[i])){

            postfix += infix[i];

        }



        else if(infix[i] == '('){

            s.push(infix[i]);

        }



        else if(infix[i] == ')'){

            while(!s.isEmpty() && s.peek() != '('){

                postfix += s.pop();

            }

            if(!s.isEmpty() && s.peek() == '('){

                    s.pop();

                }

        }

        else if(isOperater(infix[i])){

            if(s.isEmpty() || precedance(infix[i])>precedance(s.peek())){

                s.push(infix[i]);

            }



            else{

                while(!s.isEmpty() && precedance(infix[i])<=precedance(s.peek())){

                    postfix += s.pop();

                }



                s.push(infix[i]);

            }

        }

    }



    while(!s.isEmpty()){

        postfix += s.pop();

    }

    return postfix;

}



string inToPre(stack& s, string& infix) {

        string prefix;

        reverse(infix.begin(),infix.end());



        for (int i=0;i<infix.length();i++) {

        

        if (isalnum(infix[i])) {

            prefix += infix[i];

        } else if (infix[i] == ')') {

            s.push(infix[i]);

        } else if (infix[i] == '(') {

            while (!s.isEmpty() && s.peek() != ')') {

                prefix += s.pop();

            }

            if (!s.isEmpty() && s.peek() == ')') {

                s.pop();

            }

        } else if (isOperater(infix[i])) {

            if (s.isEmpty() || precedance(infix[i]) > precedance(s.peek())) {

                s.push(infix[i]);

            } else {

                while (!s.isEmpty() && precedance(infix[i]) <= precedance(s.peek())) {

                    prefix += s.pop();

                }

                s.push(infix[i]);

            }

        }

    }



    while (!s.isEmpty()) {

        prefix += s.pop();

    }



    reverse(prefix.begin(), prefix.end());



    return prefix;

}



int main(){

    string infix, postfix, prefix;

    int ch;

    cout<<"infix";

    cin>>infix;

    stack st;



    do{

        cout<<"select 1 for postfix"<<endl<<"2 for prefix"<< endl<<"3 for exit";

        cin>>ch;



        switch(ch){

            case 1:

            postfix = inToPost(st,infix);



            cout<<"postfix exp  "<<postfix;

            break;



            case 2:

            prefix = inToPre(st,infix);



            cout<<"prefix exp  "<<prefix;

            break;



            case 3:

            cout<<"exited";

            break;



            default:

            cout<<"enter correct option";

            break;

        }

    }while(ch!=3);

    return 0;

}
